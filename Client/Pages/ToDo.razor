@page "/todo"

<center><h2 style="font-family: serif">Lista de a fazeres</h2></center>

<Addons>
    <Addon AddonType="AddonType.Body">
        <TextEdit Placeholder="Algo a fazer" @bind-Text= "newTodo"/>
    </Addon>
    <Addon AddonType="AddonType.End">
        <Button Color="Color.Secondary" Clicked = "AddTodo">Adicionar</Button>
    </Addon>
</Addons>

<p></p>
<h3 style="font-family: serif">Feito (@todos.Count(todo => !todo.feito))</h3>
<p></p>

@*<input type="checkbox" @bind="todo.feito"/>
            <input @bind="todo.titulo" />
            <input  @bind = "todo.data"/>*@
@*
<ul class="list-group list-group-flush">
    @foreach (var todo in todos)
    {
        <h1></h1>
        
        <li class="list-group-item">
            <h5 style="font-family: Arial, Helvetica, sans-serif;">
            <input type="checkbox" @bind="todo.feito"/>
            <input @bind="todo.titulo" />
            </h5>
        </li>
        <h1></h1>
          
    }
</ul> 
*@

<table class="table table-striped">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Feito</th>
      <th scope="col">Tarefa</th>
      <th scope="col">Data</th>
      <th scope="col">Situação</th>
    </tr>
  </thead>
  <tbody>
    
     @foreach ( var todo in todos)
    {
    <tr>
      
      <th scope="row">@todo.posicao</th>
      <td><input type="checkbox" @bind="todo.feito"/></td>
      <td><input @bind="todo.titulo" /></td>
      <td><input  @bind="todo.data"/></td>
      <td><h5>@check(todo.feito)</h5></td>
    </tr>
    }
    
  </tbody>
</table>







@code{
    public IList<AFazer> todos = new List<AFazer>();
    private string newTodo;

    public int count = 1;

    private string check(bool info){
        if(info == true){
          return "Concluído";
        }
        return "Incompleto";

    }

    private void AddTodo(){
        if(!string.IsNullOrWhiteSpace(newTodo)){
            todos.Add(new AFazer{ titulo = newTodo , posicao = count, data = NewData()});
            newTodo = string.Empty;
            count = count + 1;
        }
    }
    private DateTime NewData(){
        return DateTime.Now;
    }
}